
stm32f4xx1306_oled_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001258  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002854  08001400  08001400  00011400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c54  08003c54  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c54  08003c54  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c54  08003c54  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c54  08003c54  00013c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c58  08003c58  00013c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08003c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  2000002c  08003c88  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  08003c88  00020478  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000059cc  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000d94  00000000  00000000  00025a22  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000318  00000000  00000000  000267b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002b0  00000000  00000000  00026ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003a38  00000000  00000000  00026d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003263  00000000  00000000  0002a7b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000d241  00000000  00000000  0002da1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003ac5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000be0  00000000  00000000  0003acd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080013e8 	.word	0x080013e8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000030 	.word	0x20000030
 80001e4:	080013e8 	.word	0x080013e8

080001e8 <GPIO_PClkCtrl>:


/*
 *  Peripheral Clock Setup
 */
void GPIO_PClkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t STATE){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	70fb      	strb	r3, [r7, #3]
	if(STATE == ENABLE)	{
 80001f4:	78fb      	ldrb	r3, [r7, #3]
 80001f6:	2b01      	cmp	r3, #1
 80001f8:	d162      	bne.n	80002c0 <GPIO_PClkCtrl+0xd8>
		if(pGPIOx == GPIOA)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a65      	ldr	r2, [pc, #404]	; (8000394 <GPIO_PClkCtrl+0x1ac>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d106      	bne.n	8000210 <GPIO_PClkCtrl+0x28>
		{
			GPIOA_PCLK_EN();
 8000202:	4b65      	ldr	r3, [pc, #404]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 8000204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000206:	4a64      	ldr	r2, [pc, #400]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOH_PCLK_DI();
		}else if(pGPIOx == GPIOI){
			GPIOI_PCLK_DI();
		}
	}
}
 800020e:	e0bc      	b.n	800038a <GPIO_PClkCtrl+0x1a2>
		}else if (pGPIOx == GPIOB)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4a62      	ldr	r2, [pc, #392]	; (800039c <GPIO_PClkCtrl+0x1b4>)
 8000214:	4293      	cmp	r3, r2
 8000216:	d106      	bne.n	8000226 <GPIO_PClkCtrl+0x3e>
			GPIOB_PCLK_EN();
 8000218:	4b5f      	ldr	r3, [pc, #380]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021c:	4a5e      	ldr	r2, [pc, #376]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 800021e:	f043 0302 	orr.w	r3, r3, #2
 8000222:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000224:	e0b1      	b.n	800038a <GPIO_PClkCtrl+0x1a2>
		}else if (pGPIOx == GPIOC)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a5d      	ldr	r2, [pc, #372]	; (80003a0 <GPIO_PClkCtrl+0x1b8>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <GPIO_PClkCtrl+0x54>
			GPIOC_PCLK_EN();
 800022e:	4b5a      	ldr	r3, [pc, #360]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000232:	4a59      	ldr	r2, [pc, #356]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 8000234:	f043 0304 	orr.w	r3, r3, #4
 8000238:	6313      	str	r3, [r2, #48]	; 0x30
}
 800023a:	e0a6      	b.n	800038a <GPIO_PClkCtrl+0x1a2>
		}else if (pGPIOx == GPIOD)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a59      	ldr	r2, [pc, #356]	; (80003a4 <GPIO_PClkCtrl+0x1bc>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <GPIO_PClkCtrl+0x6a>
			GPIOD_PCLK_EN();
 8000244:	4b54      	ldr	r3, [pc, #336]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	4a53      	ldr	r2, [pc, #332]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 800024a:	f043 0308 	orr.w	r3, r3, #8
 800024e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000250:	e09b      	b.n	800038a <GPIO_PClkCtrl+0x1a2>
		}else if (pGPIOx == GPIOE)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a54      	ldr	r2, [pc, #336]	; (80003a8 <GPIO_PClkCtrl+0x1c0>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d106      	bne.n	8000268 <GPIO_PClkCtrl+0x80>
			GPIOE_PCLK_EN();
 800025a:	4b4f      	ldr	r3, [pc, #316]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025e:	4a4e      	ldr	r2, [pc, #312]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 8000260:	f043 0310 	orr.w	r3, r3, #16
 8000264:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000266:	e090      	b.n	800038a <GPIO_PClkCtrl+0x1a2>
		}else if (pGPIOx == GPIOF)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a50      	ldr	r2, [pc, #320]	; (80003ac <GPIO_PClkCtrl+0x1c4>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d106      	bne.n	800027e <GPIO_PClkCtrl+0x96>
			GPIOF_PCLK_EN();
 8000270:	4b49      	ldr	r3, [pc, #292]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000274:	4a48      	ldr	r2, [pc, #288]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 8000276:	f043 0320 	orr.w	r3, r3, #32
 800027a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800027c:	e085      	b.n	800038a <GPIO_PClkCtrl+0x1a2>
		}else if (pGPIOx == GPIOG)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a4b      	ldr	r2, [pc, #300]	; (80003b0 <GPIO_PClkCtrl+0x1c8>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d106      	bne.n	8000294 <GPIO_PClkCtrl+0xac>
			GPIOG_PCLK_EN();
 8000286:	4b44      	ldr	r3, [pc, #272]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028a:	4a43      	ldr	r2, [pc, #268]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 800028c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000290:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000292:	e07a      	b.n	800038a <GPIO_PClkCtrl+0x1a2>
		}else if (pGPIOx == GPIOH)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a47      	ldr	r2, [pc, #284]	; (80003b4 <GPIO_PClkCtrl+0x1cc>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d106      	bne.n	80002aa <GPIO_PClkCtrl+0xc2>
			GPIOH_PCLK_EN();
 800029c:	4b3e      	ldr	r3, [pc, #248]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a3d      	ldr	r2, [pc, #244]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 80002a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a8:	e06f      	b.n	800038a <GPIO_PClkCtrl+0x1a2>
		}else if (pGPIOx == GPIOI)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a42      	ldr	r2, [pc, #264]	; (80003b8 <GPIO_PClkCtrl+0x1d0>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d16b      	bne.n	800038a <GPIO_PClkCtrl+0x1a2>
			GPIOI_PCLK_EN();
 80002b2:	4b39      	ldr	r3, [pc, #228]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b6:	4a38      	ldr	r2, [pc, #224]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 80002b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002be:	e064      	b.n	800038a <GPIO_PClkCtrl+0x1a2>
	else if(STATE == DISABLE){
 80002c0:	78fb      	ldrb	r3, [r7, #3]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d161      	bne.n	800038a <GPIO_PClkCtrl+0x1a2>
		if(pGPIOx == GPIOA){
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4a32      	ldr	r2, [pc, #200]	; (8000394 <GPIO_PClkCtrl+0x1ac>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d106      	bne.n	80002dc <GPIO_PClkCtrl+0xf4>
			GPIOA_PCLK_DI();
 80002ce:	4b32      	ldr	r3, [pc, #200]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 80002d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d2:	4a31      	ldr	r2, [pc, #196]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 80002d4:	f023 0301 	bic.w	r3, r3, #1
 80002d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002da:	e056      	b.n	800038a <GPIO_PClkCtrl+0x1a2>
		}else if(pGPIOx == GPIOB){
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4a2f      	ldr	r2, [pc, #188]	; (800039c <GPIO_PClkCtrl+0x1b4>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d106      	bne.n	80002f2 <GPIO_PClkCtrl+0x10a>
			GPIOB_PCLK_DI();
 80002e4:	4b2c      	ldr	r3, [pc, #176]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 80002e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e8:	4a2b      	ldr	r2, [pc, #172]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 80002ea:	f023 0302 	bic.w	r3, r3, #2
 80002ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f0:	e04b      	b.n	800038a <GPIO_PClkCtrl+0x1a2>
		}else if(pGPIOx == GPIOC){
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4a2a      	ldr	r2, [pc, #168]	; (80003a0 <GPIO_PClkCtrl+0x1b8>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d106      	bne.n	8000308 <GPIO_PClkCtrl+0x120>
			GPIOC_PCLK_DI();
 80002fa:	4b27      	ldr	r3, [pc, #156]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 80002fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fe:	4a26      	ldr	r2, [pc, #152]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 8000300:	f023 0304 	bic.w	r3, r3, #4
 8000304:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000306:	e040      	b.n	800038a <GPIO_PClkCtrl+0x1a2>
		}else if(pGPIOx == GPIOD){
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4a26      	ldr	r2, [pc, #152]	; (80003a4 <GPIO_PClkCtrl+0x1bc>)
 800030c:	4293      	cmp	r3, r2
 800030e:	d106      	bne.n	800031e <GPIO_PClkCtrl+0x136>
			GPIOD_PCLK_DI();
 8000310:	4b21      	ldr	r3, [pc, #132]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 8000312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000314:	4a20      	ldr	r2, [pc, #128]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 8000316:	f023 0308 	bic.w	r3, r3, #8
 800031a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800031c:	e035      	b.n	800038a <GPIO_PClkCtrl+0x1a2>
		}else if(pGPIOx == GPIOE){
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a21      	ldr	r2, [pc, #132]	; (80003a8 <GPIO_PClkCtrl+0x1c0>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d106      	bne.n	8000334 <GPIO_PClkCtrl+0x14c>
			GPIOE_PCLK_DI();
 8000326:	4b1c      	ldr	r3, [pc, #112]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 8000328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032a:	4a1b      	ldr	r2, [pc, #108]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 800032c:	f023 0310 	bic.w	r3, r3, #16
 8000330:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000332:	e02a      	b.n	800038a <GPIO_PClkCtrl+0x1a2>
		}else if(pGPIOx == GPIOF){
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4a1d      	ldr	r2, [pc, #116]	; (80003ac <GPIO_PClkCtrl+0x1c4>)
 8000338:	4293      	cmp	r3, r2
 800033a:	d106      	bne.n	800034a <GPIO_PClkCtrl+0x162>
			GPIOF_PCLK_DI();
 800033c:	4b16      	ldr	r3, [pc, #88]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 800033e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000340:	4a15      	ldr	r2, [pc, #84]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 8000342:	f023 0320 	bic.w	r3, r3, #32
 8000346:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000348:	e01f      	b.n	800038a <GPIO_PClkCtrl+0x1a2>
		}else if(pGPIOx == GPIOG){
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4a18      	ldr	r2, [pc, #96]	; (80003b0 <GPIO_PClkCtrl+0x1c8>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d106      	bne.n	8000360 <GPIO_PClkCtrl+0x178>
			GPIOG_PCLK_DI();
 8000352:	4b11      	ldr	r3, [pc, #68]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000356:	4a10      	ldr	r2, [pc, #64]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 8000358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800035c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800035e:	e014      	b.n	800038a <GPIO_PClkCtrl+0x1a2>
		}else if(pGPIOx == GPIOH){
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4a14      	ldr	r2, [pc, #80]	; (80003b4 <GPIO_PClkCtrl+0x1cc>)
 8000364:	4293      	cmp	r3, r2
 8000366:	d106      	bne.n	8000376 <GPIO_PClkCtrl+0x18e>
			GPIOH_PCLK_DI();
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 800036a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036c:	4a0a      	ldr	r2, [pc, #40]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 800036e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000372:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000374:	e009      	b.n	800038a <GPIO_PClkCtrl+0x1a2>
		}else if(pGPIOx == GPIOI){
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4a0f      	ldr	r2, [pc, #60]	; (80003b8 <GPIO_PClkCtrl+0x1d0>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d105      	bne.n	800038a <GPIO_PClkCtrl+0x1a2>
			GPIOI_PCLK_DI();
 800037e:	4b06      	ldr	r3, [pc, #24]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 8000380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000382:	4a05      	ldr	r2, [pc, #20]	; (8000398 <GPIO_PClkCtrl+0x1b0>)
 8000384:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000388:	6313      	str	r3, [r2, #48]	; 0x30
}
 800038a:	bf00      	nop
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr
 8000394:	40020000 	.word	0x40020000
 8000398:	40023800 	.word	0x40023800
 800039c:	40020400 	.word	0x40020400
 80003a0:	40020800 	.word	0x40020800
 80003a4:	40020c00 	.word	0x40020c00
 80003a8:	40021000 	.word	0x40021000
 80003ac:	40021400 	.word	0x40021400
 80003b0:	40021800 	.word	0x40021800
 80003b4:	40021c00 	.word	0x40021c00
 80003b8:	40022000 	.word	0x40022000

080003bc <GPIO_Init>:

/*
 *  Peripheral Init and DeInit Setup
 */
void GPIO_Init(GPIO_HANDLE_t *pGPIOHandle){
 80003bc:	b580      	push	{r7, lr}
 80003be:	b086      	sub	sp, #24
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 80003c4:	2300      	movs	r3, #0
 80003c6:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PClkCtrl(pGPIOHandle->pGPIOx, ENABLE);
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2101      	movs	r1, #1
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ff0a 	bl	80001e8 <GPIO_PClkCtrl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	795b      	ldrb	r3, [r3, #5]
 80003d8:	2b03      	cmp	r3, #3
 80003da:	d820      	bhi.n	800041e <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	795b      	ldrb	r3, [r3, #5]
 80003e0:	461a      	mov	r2, r3
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	791b      	ldrb	r3, [r3, #4]
 80003e6:	005b      	lsls	r3, r3, #1
 80003e8:	fa02 f303 	lsl.w	r3, r2, r3
 80003ec:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->GPIO_MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	681a      	ldr	r2, [r3, #0]
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	791b      	ldrb	r3, [r3, #4]
 80003f8:	005b      	lsls	r3, r3, #1
 80003fa:	2103      	movs	r1, #3
 80003fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000400:	43db      	mvns	r3, r3
 8000402:	4619      	mov	r1, r3
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	400a      	ands	r2, r1
 800040a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->GPIO_MODER |= temp; //setting
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	6819      	ldr	r1, [r3, #0]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	697a      	ldr	r2, [r7, #20]
 8000418:	430a      	orrs	r2, r1
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	e0c1      	b.n	80005a2 <GPIO_Init+0x1e6>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	795b      	ldrb	r3, [r3, #5]
 8000422:	2b04      	cmp	r3, #4
 8000424:	d117      	bne.n	8000456 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->EXTI_FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000426:	4b47      	ldr	r3, [pc, #284]	; (8000544 <GPIO_Init+0x188>)
 8000428:	68db      	ldr	r3, [r3, #12]
 800042a:	687a      	ldr	r2, [r7, #4]
 800042c:	7912      	ldrb	r2, [r2, #4]
 800042e:	4611      	mov	r1, r2
 8000430:	2201      	movs	r2, #1
 8000432:	408a      	lsls	r2, r1
 8000434:	4611      	mov	r1, r2
 8000436:	4a43      	ldr	r2, [pc, #268]	; (8000544 <GPIO_Init+0x188>)
 8000438:	430b      	orrs	r3, r1
 800043a:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->EXTI_RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800043c:	4b41      	ldr	r3, [pc, #260]	; (8000544 <GPIO_Init+0x188>)
 800043e:	689b      	ldr	r3, [r3, #8]
 8000440:	687a      	ldr	r2, [r7, #4]
 8000442:	7912      	ldrb	r2, [r2, #4]
 8000444:	4611      	mov	r1, r2
 8000446:	2201      	movs	r2, #1
 8000448:	408a      	lsls	r2, r1
 800044a:	43d2      	mvns	r2, r2
 800044c:	4611      	mov	r1, r2
 800044e:	4a3d      	ldr	r2, [pc, #244]	; (8000544 <GPIO_Init+0x188>)
 8000450:	400b      	ands	r3, r1
 8000452:	6093      	str	r3, [r2, #8]
 8000454:	e035      	b.n	80004c2 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	795b      	ldrb	r3, [r3, #5]
 800045a:	2b05      	cmp	r3, #5
 800045c:	d117      	bne.n	800048e <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->EXTI_RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800045e:	4b39      	ldr	r3, [pc, #228]	; (8000544 <GPIO_Init+0x188>)
 8000460:	689b      	ldr	r3, [r3, #8]
 8000462:	687a      	ldr	r2, [r7, #4]
 8000464:	7912      	ldrb	r2, [r2, #4]
 8000466:	4611      	mov	r1, r2
 8000468:	2201      	movs	r2, #1
 800046a:	408a      	lsls	r2, r1
 800046c:	4611      	mov	r1, r2
 800046e:	4a35      	ldr	r2, [pc, #212]	; (8000544 <GPIO_Init+0x188>)
 8000470:	430b      	orrs	r3, r1
 8000472:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->EXTI_FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000474:	4b33      	ldr	r3, [pc, #204]	; (8000544 <GPIO_Init+0x188>)
 8000476:	68db      	ldr	r3, [r3, #12]
 8000478:	687a      	ldr	r2, [r7, #4]
 800047a:	7912      	ldrb	r2, [r2, #4]
 800047c:	4611      	mov	r1, r2
 800047e:	2201      	movs	r2, #1
 8000480:	408a      	lsls	r2, r1
 8000482:	43d2      	mvns	r2, r2
 8000484:	4611      	mov	r1, r2
 8000486:	4a2f      	ldr	r2, [pc, #188]	; (8000544 <GPIO_Init+0x188>)
 8000488:	400b      	ands	r3, r1
 800048a:	60d3      	str	r3, [r2, #12]
 800048c:	e019      	b.n	80004c2 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	795b      	ldrb	r3, [r3, #5]
 8000492:	2b06      	cmp	r3, #6
 8000494:	d115      	bne.n	80004c2 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->EXTI_RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000496:	4b2b      	ldr	r3, [pc, #172]	; (8000544 <GPIO_Init+0x188>)
 8000498:	689b      	ldr	r3, [r3, #8]
 800049a:	687a      	ldr	r2, [r7, #4]
 800049c:	7912      	ldrb	r2, [r2, #4]
 800049e:	4611      	mov	r1, r2
 80004a0:	2201      	movs	r2, #1
 80004a2:	408a      	lsls	r2, r1
 80004a4:	4611      	mov	r1, r2
 80004a6:	4a27      	ldr	r2, [pc, #156]	; (8000544 <GPIO_Init+0x188>)
 80004a8:	430b      	orrs	r3, r1
 80004aa:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->EXTI_FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004ac:	4b25      	ldr	r3, [pc, #148]	; (8000544 <GPIO_Init+0x188>)
 80004ae:	68db      	ldr	r3, [r3, #12]
 80004b0:	687a      	ldr	r2, [r7, #4]
 80004b2:	7912      	ldrb	r2, [r2, #4]
 80004b4:	4611      	mov	r1, r2
 80004b6:	2201      	movs	r2, #1
 80004b8:	408a      	lsls	r2, r1
 80004ba:	4611      	mov	r1, r2
 80004bc:	4a21      	ldr	r2, [pc, #132]	; (8000544 <GPIO_Init+0x188>)
 80004be:	430b      	orrs	r3, r1
 80004c0:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	791b      	ldrb	r3, [r3, #4]
 80004c6:	089b      	lsrs	r3, r3, #2
 80004c8:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	791b      	ldrb	r3, [r3, #4]
 80004ce:	f003 0303 	and.w	r3, r3, #3
 80004d2:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a1b      	ldr	r2, [pc, #108]	; (8000548 <GPIO_Init+0x18c>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d044      	beq.n	8000568 <GPIO_Init+0x1ac>
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a1a      	ldr	r2, [pc, #104]	; (800054c <GPIO_Init+0x190>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d02b      	beq.n	8000540 <GPIO_Init+0x184>
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a18      	ldr	r2, [pc, #96]	; (8000550 <GPIO_Init+0x194>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d024      	beq.n	800053c <GPIO_Init+0x180>
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4a17      	ldr	r2, [pc, #92]	; (8000554 <GPIO_Init+0x198>)
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d01d      	beq.n	8000538 <GPIO_Init+0x17c>
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a15      	ldr	r2, [pc, #84]	; (8000558 <GPIO_Init+0x19c>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d016      	beq.n	8000534 <GPIO_Init+0x178>
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a14      	ldr	r2, [pc, #80]	; (800055c <GPIO_Init+0x1a0>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d00f      	beq.n	8000530 <GPIO_Init+0x174>
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a12      	ldr	r2, [pc, #72]	; (8000560 <GPIO_Init+0x1a4>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d008      	beq.n	800052c <GPIO_Init+0x170>
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a11      	ldr	r2, [pc, #68]	; (8000564 <GPIO_Init+0x1a8>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d101      	bne.n	8000528 <GPIO_Init+0x16c>
 8000524:	2307      	movs	r3, #7
 8000526:	e020      	b.n	800056a <GPIO_Init+0x1ae>
 8000528:	2308      	movs	r3, #8
 800052a:	e01e      	b.n	800056a <GPIO_Init+0x1ae>
 800052c:	2306      	movs	r3, #6
 800052e:	e01c      	b.n	800056a <GPIO_Init+0x1ae>
 8000530:	2305      	movs	r3, #5
 8000532:	e01a      	b.n	800056a <GPIO_Init+0x1ae>
 8000534:	2304      	movs	r3, #4
 8000536:	e018      	b.n	800056a <GPIO_Init+0x1ae>
 8000538:	2303      	movs	r3, #3
 800053a:	e016      	b.n	800056a <GPIO_Init+0x1ae>
 800053c:	2302      	movs	r3, #2
 800053e:	e014      	b.n	800056a <GPIO_Init+0x1ae>
 8000540:	2301      	movs	r3, #1
 8000542:	e012      	b.n	800056a <GPIO_Init+0x1ae>
 8000544:	40013c00 	.word	0x40013c00
 8000548:	40020000 	.word	0x40020000
 800054c:	40020400 	.word	0x40020400
 8000550:	40020800 	.word	0x40020800
 8000554:	40020c00 	.word	0x40020c00
 8000558:	40021000 	.word	0x40021000
 800055c:	40021400 	.word	0x40021400
 8000560:	40021800 	.word	0x40021800
 8000564:	40021c00 	.word	0x40021c00
 8000568:	2300      	movs	r3, #0
 800056a:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800056c:	4b59      	ldr	r3, [pc, #356]	; (80006d4 <GPIO_Init+0x318>)
 800056e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000570:	4a58      	ldr	r2, [pc, #352]	; (80006d4 <GPIO_Init+0x318>)
 8000572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000576:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->SYSCFG_EXTICR[temp1] = portcode << ( temp2 * 4);
 8000578:	7c7a      	ldrb	r2, [r7, #17]
 800057a:	7cbb      	ldrb	r3, [r7, #18]
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	fa02 f103 	lsl.w	r1, r2, r3
 8000582:	4a55      	ldr	r2, [pc, #340]	; (80006d8 <GPIO_Init+0x31c>)
 8000584:	7cfb      	ldrb	r3, [r7, #19]
 8000586:	3302      	adds	r3, #2
 8000588:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->EXTI_IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800058c:	4b53      	ldr	r3, [pc, #332]	; (80006dc <GPIO_Init+0x320>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	7912      	ldrb	r2, [r2, #4]
 8000594:	4611      	mov	r1, r2
 8000596:	2201      	movs	r2, #1
 8000598:	408a      	lsls	r2, r1
 800059a:	4611      	mov	r1, r2
 800059c:	4a4f      	ldr	r2, [pc, #316]	; (80006dc <GPIO_Init+0x320>)
 800059e:	430b      	orrs	r3, r1
 80005a0:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	799b      	ldrb	r3, [r3, #6]
 80005a6:	461a      	mov	r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	791b      	ldrb	r3, [r3, #4]
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	fa02 f303 	lsl.w	r3, r2, r3
 80005b2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->GPIO_OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	689a      	ldr	r2, [r3, #8]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	791b      	ldrb	r3, [r3, #4]
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	2103      	movs	r1, #3
 80005c2:	fa01 f303 	lsl.w	r3, r1, r3
 80005c6:	43db      	mvns	r3, r3
 80005c8:	4619      	mov	r1, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	400a      	ands	r2, r1
 80005d0:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->GPIO_OSPEEDR |= temp;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	6899      	ldr	r1, [r3, #8]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	697a      	ldr	r2, [r7, #20]
 80005de:	430a      	orrs	r2, r1
 80005e0:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	79db      	ldrb	r3, [r3, #7]
 80005e6:	461a      	mov	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	791b      	ldrb	r3, [r3, #4]
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	fa02 f303 	lsl.w	r3, r2, r3
 80005f2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->GPIO_PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	68da      	ldr	r2, [r3, #12]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	791b      	ldrb	r3, [r3, #4]
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	2103      	movs	r1, #3
 8000602:	fa01 f303 	lsl.w	r3, r1, r3
 8000606:	43db      	mvns	r3, r3
 8000608:	4619      	mov	r1, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	400a      	ands	r2, r1
 8000610:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->GPIO_PUPDR |= temp;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	68d9      	ldr	r1, [r3, #12]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	697a      	ldr	r2, [r7, #20]
 800061e:	430a      	orrs	r2, r1
 8000620:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	7a1b      	ldrb	r3, [r3, #8]
 8000626:	461a      	mov	r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	791b      	ldrb	r3, [r3, #4]
 800062c:	fa02 f303 	lsl.w	r3, r2, r3
 8000630:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->GPIO_OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	685a      	ldr	r2, [r3, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	791b      	ldrb	r3, [r3, #4]
 800063c:	4619      	mov	r1, r3
 800063e:	2301      	movs	r3, #1
 8000640:	408b      	lsls	r3, r1
 8000642:	43db      	mvns	r3, r3
 8000644:	4619      	mov	r1, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	400a      	ands	r2, r1
 800064c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->GPIO_OTYPER |= temp;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	6859      	ldr	r1, [r3, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	697a      	ldr	r2, [r7, #20]
 800065a:	430a      	orrs	r2, r1
 800065c:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	795b      	ldrb	r3, [r3, #5]
 8000662:	2b02      	cmp	r3, #2
 8000664:	d131      	bne.n	80006ca <GPIO_Init+0x30e>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	791b      	ldrb	r3, [r3, #4]
 800066a:	08db      	lsrs	r3, r3, #3
 800066c:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	791b      	ldrb	r3, [r3, #4]
 8000672:	f003 0307 	and.w	r3, r3, #7
 8000676:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	7c3a      	ldrb	r2, [r7, #16]
 800067e:	3208      	adds	r2, #8
 8000680:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	220f      	movs	r2, #15
 800068a:	fa02 f303 	lsl.w	r3, r2, r3
 800068e:	43db      	mvns	r3, r3
 8000690:	4618      	mov	r0, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	7c3a      	ldrb	r2, [r7, #16]
 8000698:	4001      	ands	r1, r0
 800069a:	3208      	adds	r2, #8
 800069c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	7c3a      	ldrb	r2, [r7, #16]
 80006a6:	3208      	adds	r2, #8
 80006a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	7a5b      	ldrb	r3, [r3, #9]
 80006b0:	461a      	mov	r2, r3
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ba:	4618      	mov	r0, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	7c3a      	ldrb	r2, [r7, #16]
 80006c2:	4301      	orrs	r1, r0
 80006c4:	3208      	adds	r2, #8
 80006c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80006ca:	bf00      	nop
 80006cc:	3718      	adds	r7, #24
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40013800 	.word	0x40013800
 80006dc:	40013c00 	.word	0x40013c00

080006e0 <I2C_PClkCtrl>:
 */




void I2C_PClkCtrl(I2C_RegDef_t *pI2Cx, uint8_t STATE){
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	460b      	mov	r3, r1
 80006ea:	70fb      	strb	r3, [r7, #3]
	if(STATE == ENABLE){
 80006ec:	78fb      	ldrb	r3, [r7, #3]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d120      	bne.n	8000734 <I2C_PClkCtrl+0x54>

				if(pI2Cx == I2C1){
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a23      	ldr	r2, [pc, #140]	; (8000784 <I2C_PClkCtrl+0xa4>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d106      	bne.n	8000708 <I2C_PClkCtrl+0x28>

					I2C1_PCLK_EN();
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <I2C_PClkCtrl+0xa8>)
 80006fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fe:	4a22      	ldr	r2, [pc, #136]	; (8000788 <I2C_PClkCtrl+0xa8>)
 8000700:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000704:	6413      	str	r3, [r2, #64]	; 0x40

					I2C3_PCLK_DI();

				}
			}
}
 8000706:	e038      	b.n	800077a <I2C_PClkCtrl+0x9a>
				}else if(pI2Cx == I2C2){
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a20      	ldr	r2, [pc, #128]	; (800078c <I2C_PClkCtrl+0xac>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d106      	bne.n	800071e <I2C_PClkCtrl+0x3e>
					I2C2_PCLK_EN();
 8000710:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <I2C_PClkCtrl+0xa8>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	4a1c      	ldr	r2, [pc, #112]	; (8000788 <I2C_PClkCtrl+0xa8>)
 8000716:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800071a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800071c:	e02d      	b.n	800077a <I2C_PClkCtrl+0x9a>
				}else if(pI2Cx == I2C3){
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4a1b      	ldr	r2, [pc, #108]	; (8000790 <I2C_PClkCtrl+0xb0>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d129      	bne.n	800077a <I2C_PClkCtrl+0x9a>
					I2C3_PCLK_EN();
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <I2C_PClkCtrl+0xa8>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072a:	4a17      	ldr	r2, [pc, #92]	; (8000788 <I2C_PClkCtrl+0xa8>)
 800072c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000730:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000732:	e022      	b.n	800077a <I2C_PClkCtrl+0x9a>
			}else if(STATE == DISABLE){
 8000734:	78fb      	ldrb	r3, [r7, #3]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d11f      	bne.n	800077a <I2C_PClkCtrl+0x9a>
				if(pI2Cx == I2C1){
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4a11      	ldr	r2, [pc, #68]	; (8000784 <I2C_PClkCtrl+0xa4>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d106      	bne.n	8000750 <I2C_PClkCtrl+0x70>
					I2C1_PCLK_DI();
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <I2C_PClkCtrl+0xa8>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000746:	4a10      	ldr	r2, [pc, #64]	; (8000788 <I2C_PClkCtrl+0xa8>)
 8000748:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800074c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800074e:	e014      	b.n	800077a <I2C_PClkCtrl+0x9a>
				}else if(pI2Cx == I2C2){
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4a0e      	ldr	r2, [pc, #56]	; (800078c <I2C_PClkCtrl+0xac>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d106      	bne.n	8000766 <I2C_PClkCtrl+0x86>
					I2C2_PCLK_DI();
 8000758:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <I2C_PClkCtrl+0xa8>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <I2C_PClkCtrl+0xa8>)
 800075e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000762:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000764:	e009      	b.n	800077a <I2C_PClkCtrl+0x9a>
				}else if(pI2Cx == I2C3){
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4a09      	ldr	r2, [pc, #36]	; (8000790 <I2C_PClkCtrl+0xb0>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d105      	bne.n	800077a <I2C_PClkCtrl+0x9a>
					I2C3_PCLK_DI();
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <I2C_PClkCtrl+0xa8>)
 8000770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000772:	4a05      	ldr	r2, [pc, #20]	; (8000788 <I2C_PClkCtrl+0xa8>)
 8000774:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000778:	6413      	str	r3, [r2, #64]	; 0x40
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	40005400 	.word	0x40005400
 8000788:	40023800 	.word	0x40023800
 800078c:	40005800 	.word	0x40005800
 8000790:	40005c00 	.word	0x40005c00

08000794 <I2C_Init>:
 */




void I2C_Init(I2C_HANDLE_t *pI2CHandle){
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]

	uint32_t tempReg = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]

	 //enable the peripheral clock

	I2C_PClkCtrl(pI2CHandle->pI2Cx, ENABLE);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2101      	movs	r1, #1
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff ff9a 	bl	80006e0 <I2C_PClkCtrl>
	// ack control bit can only be set if the Peripheral Enable is SET, i.e. PE is set to 1
	// which does not happen now only after all the initialization is done then only PE is enabled
	// so we Enable the ACK after that and not here

	//configure the FREQ field of CR2
	tempReg = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
	tempReg |= RCC_GetPCLK1Value() /1000000U ;
 80007b0:	f000 f9bc 	bl	8000b2c <RCC_GetPCLK1Value>
 80007b4:	4602      	mov	r2, r0
 80007b6:	4b48      	ldr	r3, [pc, #288]	; (80008d8 <I2C_Init+0x144>)
 80007b8:	fba3 2302 	umull	r2, r3, r3, r2
 80007bc:	0c9b      	lsrs	r3, r3, #18
 80007be:	68fa      	ldr	r2, [r7, #12]
 80007c0:	4313      	orrs	r3, r2
 80007c2:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->I2C_CR2 =  (tempReg & 0x3F);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	68fa      	ldr	r2, [r7, #12]
 80007ca:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80007ce:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempReg = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60fb      	str	r3, [r7, #12]
	tempReg |= pI2CHandle->I2C_Config.I2C_DeviceAdress << I2C_OAR1_ADD_7_1;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	7a1b      	ldrb	r3, [r3, #8]
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	461a      	mov	r2, r3
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	4313      	orrs	r3, r2
 80007e0:	60fb      	str	r3, [r7, #12]
	tempReg |= ( 1 << I2C_OAR1_BIT14);
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e8:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->I2C_OAR1 = tempReg;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	68fa      	ldr	r2, [r7, #12]
 80007f0:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	817b      	strh	r3, [r7, #10]
	tempReg = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCL_Speed <= I2C_SCL_SPEED_SM)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	4a37      	ldr	r2, [pc, #220]	; (80008dc <I2C_Init+0x148>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d80f      	bhi.n	8000824 <I2C_Init+0x90>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCL_Speed ) );
 8000804:	f000 f992 	bl	8000b2c <RCC_GetPCLK1Value>
 8000808:	4602      	mov	r2, r0
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	fbb2 f3f3 	udiv	r3, r2, r3
 8000814:	817b      	strh	r3, [r7, #10]
		tempReg |= (ccr_value & 0xFFF);
 8000816:	897b      	ldrh	r3, [r7, #10]
 8000818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800081c:	68fa      	ldr	r2, [r7, #12]
 800081e:	4313      	orrs	r3, r2
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	e02d      	b.n	8000880 <I2C_Init+0xec>
	}else
	{
		//mode is fast mode
		tempReg |= ( 1 << I2C_CCR_F_S);
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800082a:	60fb      	str	r3, [r7, #12]
		tempReg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << I2C_CCR_DUTY);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	895b      	ldrh	r3, [r3, #10]
 8000830:	039b      	lsls	r3, r3, #14
 8000832:	461a      	mov	r2, r3
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	4313      	orrs	r3, r2
 8000838:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	895b      	ldrh	r3, [r3, #10]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d10b      	bne.n	800085a <I2C_Init+0xc6>
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCL_Speed ) );
 8000842:	f000 f973 	bl	8000b2c <RCC_GetPCLK1Value>
 8000846:	4601      	mov	r1, r0
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	685a      	ldr	r2, [r3, #4]
 800084c:	4613      	mov	r3, r2
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	4413      	add	r3, r2
 8000852:	fbb1 f3f3 	udiv	r3, r1, r3
 8000856:	817b      	strh	r3, [r7, #10]
 8000858:	e00c      	b.n	8000874 <I2C_Init+0xe0>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCL_Speed ) );
 800085a:	f000 f967 	bl	8000b2c <RCC_GetPCLK1Value>
 800085e:	4601      	mov	r1, r0
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	4613      	mov	r3, r2
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	4413      	add	r3, r2
 800086a:	009a      	lsls	r2, r3, #2
 800086c:	4413      	add	r3, r2
 800086e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000872:	817b      	strh	r3, [r7, #10]
		}
		tempReg |= (ccr_value & 0xFFF);
 8000874:	897b      	ldrh	r3, [r7, #10]
 8000876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	4313      	orrs	r3, r2
 800087e:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->I2C_CCR = tempReg;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	68fa      	ldr	r2, [r7, #12]
 8000886:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCL_Speed <= I2C_SCL_SPEED_SM)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	4a13      	ldr	r2, [pc, #76]	; (80008dc <I2C_Init+0x148>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d809      	bhi.n	80008a6 <I2C_Init+0x112>
	{
		//mode is standard mode

		tempReg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8000892:	f000 f94b 	bl	8000b2c <RCC_GetPCLK1Value>
 8000896:	4602      	mov	r2, r0
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <I2C_Init+0x144>)
 800089a:	fba3 2302 	umull	r2, r3, r3, r2
 800089e:	0c9b      	lsrs	r3, r3, #18
 80008a0:	3301      	adds	r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	e00d      	b.n	80008c2 <I2C_Init+0x12e>

	}else
	{
		//mode is fast mode
		tempReg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 80008a6:	f000 f941 	bl	8000b2c <RCC_GetPCLK1Value>
 80008aa:	4602      	mov	r2, r0
 80008ac:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80008b0:	fb03 f302 	mul.w	r3, r3, r2
 80008b4:	0a5b      	lsrs	r3, r3, #9
 80008b6:	4a0a      	ldr	r2, [pc, #40]	; (80008e0 <I2C_Init+0x14c>)
 80008b8:	fba2 2303 	umull	r2, r3, r2, r3
 80008bc:	09db      	lsrs	r3, r3, #7
 80008be:	3301      	adds	r3, #1
 80008c0:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->I2C_TRISE = (tempReg & 0x3F);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	68fa      	ldr	r2, [r7, #12]
 80008c8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008cc:	621a      	str	r2, [r3, #32]
}
 80008ce:	bf00      	nop
 80008d0:	3710      	adds	r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	431bde83 	.word	0x431bde83
 80008dc:	000186a0 	.word	0x000186a0
 80008e0:	00044b83 	.word	0x00044b83

080008e4 <I2C_MasterSendData>:
 */




void I2C_MasterSendData(I2C_HANDLE_t *pI2CHandle, uint8_t * pTxBuffer, uint8_t Len, uint8_t SlaveAddr, uint8_t Sr){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	4611      	mov	r1, r2
 80008f0:	461a      	mov	r2, r3
 80008f2:	460b      	mov	r3, r1
 80008f4:	71fb      	strb	r3, [r7, #7]
 80008f6:	4613      	mov	r3, r2
 80008f8:	71bb      	strb	r3, [r7, #6]

	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 f8a0 	bl	8000a44 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus_SR1(pI2CHandle->pI2Cx,I2C_SB_FLAG)   );
 8000904:	bf00      	nop
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	2101      	movs	r1, #1
 800090c:	4618      	mov	r0, r3
 800090e:	f000 f86b 	bl	80009e8 <I2C_GetFlagStatus_SR1>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d0f6      	beq.n	8000906 <I2C_MasterSendData+0x22>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_SendSlaveAddress(pI2CHandle->pI2Cx,SlaveAddr, I2C_SEND_RW);
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	79b9      	ldrb	r1, [r7, #6]
 800091e:	2200      	movs	r2, #0
 8000920:	4618      	mov	r0, r3
 8000922:	f000 f8ad 	bl	8000a80 <I2C_SendSlaveAddress>

	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus_SR1(pI2CHandle->pI2Cx,I2C_ADDR_FLAG)   );
 8000926:	bf00      	nop
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2102      	movs	r1, #2
 800092e:	4618      	mov	r0, r3
 8000930:	f000 f85a 	bl	80009e8 <I2C_GetFlagStatus_SR1>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d0f6      	beq.n	8000928 <I2C_MasterSendData+0x44>

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 800093a:	68f8      	ldr	r0, [r7, #12]
 800093c:	f000 f8bf 	bl	8000abe <I2C_ClearADDRFlag>

	//6. send the data until len becomes 0

	while(Len > 0)
 8000940:	e014      	b.n	800096c <I2C_MasterSendData+0x88>
	{
		while(! I2C_GetFlagStatus_SR1(pI2CHandle->pI2Cx,I2C_TXE_FLAG) ); //Wait till TXE is set
 8000942:	bf00      	nop
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2180      	movs	r1, #128	; 0x80
 800094a:	4618      	mov	r0, r3
 800094c:	f000 f84c 	bl	80009e8 <I2C_GetFlagStatus_SR1>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d0f6      	beq.n	8000944 <I2C_MasterSendData+0x60>
		pI2CHandle->pI2Cx->I2C_DR = *pTxBuffer;
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	781a      	ldrb	r2, [r3, #0]
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	3301      	adds	r3, #1
 8000964:	60bb      	str	r3, [r7, #8]
		Len--;
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	3b01      	subs	r3, #1
 800096a:	71fb      	strb	r3, [r7, #7]
	while(Len > 0)
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d1e7      	bne.n	8000942 <I2C_MasterSendData+0x5e>

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)

	while(! I2C_GetFlagStatus_SR1(pI2CHandle->pI2Cx,I2C_TXE_FLAG) );
 8000972:	bf00      	nop
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2180      	movs	r1, #128	; 0x80
 800097a:	4618      	mov	r0, r3
 800097c:	f000 f834 	bl	80009e8 <I2C_GetFlagStatus_SR1>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d0f6      	beq.n	8000974 <I2C_MasterSendData+0x90>

	while(! I2C_GetFlagStatus_SR1(pI2CHandle->pI2Cx,I2C_BTF_FLAG) );
 8000986:	bf00      	nop
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2104      	movs	r1, #4
 800098e:	4618      	mov	r0, r3
 8000990:	f000 f82a 	bl	80009e8 <I2C_GetFlagStatus_SR1>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d0f6      	beq.n	8000988 <I2C_MasterSendData+0xa4>


	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR )
 800099a:	7e3b      	ldrb	r3, [r7, #24]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d104      	bne.n	80009aa <I2C_MasterSendData+0xc6>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 f85c 	bl	8000a62 <I2C_GenerateStopCondition>

}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <I2C_PCtrl>:




// I2C ENABLE OR DISABLE
void I2C_PCtrl(I2C_RegDef_t *pI2Cx, uint8_t STATE){
 80009b2:	b480      	push	{r7}
 80009b4:	b083      	sub	sp, #12
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
 80009ba:	460b      	mov	r3, r1
 80009bc:	70fb      	strb	r3, [r7, #3]
	if(STATE == ENABLE){
 80009be:	78fb      	ldrb	r3, [r7, #3]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d106      	bne.n	80009d2 <I2C_PCtrl+0x20>

		pI2Cx->I2C_CR1 |= (1 << I2C_CR1_I2C_EN);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f043 0201 	orr.w	r2, r3, #1
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	601a      	str	r2, [r3, #0]
	}else{

		pI2Cx->I2C_CR1 &= ~(1 << 0);

	}
}
 80009d0:	e005      	b.n	80009de <I2C_PCtrl+0x2c>
		pI2Cx->I2C_CR1 &= ~(1 << 0);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f023 0201 	bic.w	r2, r3, #1
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	601a      	str	r2, [r3, #0]
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr

080009e8 <I2C_GetFlagStatus_SR1>:



// Get the Flag Status Of the Flag Given
uint8_t I2C_GetFlagStatus_SR1(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
	if(pI2Cx->I2C_SR1 & FlagName)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	695a      	ldr	r2, [r3, #20]
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	4013      	ands	r3, r2
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <I2C_GetFlagStatus_SR1+0x1a>
	{
		return FLAG_SET;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e000      	b.n	8000a04 <I2C_GetFlagStatus_SR1+0x1c>
	}
	return FLAG_RESET;
 8000a02:	2300      	movs	r3, #0
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr

08000a0e <I2C_ManageAcking>:




void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	b083      	sub	sp, #12
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
 8000a16:	460b      	mov	r3, r1
 8000a18:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2c_ACK_EN)
 8000a1a:	78fb      	ldrb	r3, [r7, #3]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d106      	bne.n	8000a2e <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->I2C_CR1 |= ( 1 << I2C_CR1_ACK);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->I2C_CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 8000a2c:	e005      	b.n	8000a3a <I2C_ManageAcking+0x2c>
		pI2Cx->I2C_CR1 &= ~( 1 << I2C_CR1_ACK);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	601a      	str	r2, [r3, #0]
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr

08000a44 <I2C_GenerateStartCondition>:
}




void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	pI2Cx->I2C_CR1 |= ( 1 << I2C_CR1_START);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	601a      	str	r2, [r3, #0]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr

08000a62 <I2C_GenerateStopCondition>:




void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 8000a62:	b480      	push	{r7}
 8000a64:	b083      	sub	sp, #12
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
	pI2Cx->I2C_CR1 |= ( 1 << I2C_CR1_STOP);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	601a      	str	r2, [r3, #0]
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr

08000a80 <I2C_SendSlaveAddress>:





static void I2C_SendSlaveAddress(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr, uint8_t SR){
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	70fb      	strb	r3, [r7, #3]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	70bb      	strb	r3, [r7, #2]

	SlaveAddr = SlaveAddr << 1;
 8000a90:	78fb      	ldrb	r3, [r7, #3]
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	70fb      	strb	r3, [r7, #3]
	if(SR){
 8000a96:	78bb      	ldrb	r3, [r7, #2]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d004      	beq.n	8000aa6 <I2C_SendSlaveAddress+0x26>
		SlaveAddr |=  (1); //SlaveAddr is Slave address + r/nw bit=1 RECIEVE
 8000a9c:	78fb      	ldrb	r3, [r7, #3]
 8000a9e:	f043 0301 	orr.w	r3, r3, #1
 8000aa2:	70fb      	strb	r3, [r7, #3]
 8000aa4:	e003      	b.n	8000aae <I2C_SendSlaveAddress+0x2e>
	}else{
		SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0 SEND
 8000aa6:	78fb      	ldrb	r3, [r7, #3]
 8000aa8:	f023 0301 	bic.w	r3, r3, #1
 8000aac:	70fb      	strb	r3, [r7, #3]
	}

	pI2Cx->I2C_DR = SlaveAddr;
 8000aae:	78fa      	ldrb	r2, [r7, #3]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	611a      	str	r2, [r3, #16]
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr

08000abe <I2C_ClearADDRFlag>:




void I2C_ClearADDRFlag(I2C_HANDLE_t *pI2CHandle){
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b084      	sub	sp, #16
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
		//check for device mode
		if(pI2CHandle->pI2Cx->I2C_SR2 & ( 1 << I2C_SR2_MSL))
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d01f      	beq.n	8000b14 <I2C_ClearADDRFlag+0x56>
		{
			//device is in master mode
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	7f1b      	ldrb	r3, [r3, #28]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d112      	bne.n	8000b02 <I2C_ClearADDRFlag+0x44>
			{
				if(pI2CHandle->RxSize  == 1)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6a1b      	ldr	r3, [r3, #32]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d11f      	bne.n	8000b24 <I2C_ClearADDRFlag+0x66>
				{
					//first disable the ack
					I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff ff8f 	bl	8000a0e <I2C_ManageAcking>

					//clear the ADDR flag ( read SR1 , read SR2)
					dummy_read = pI2CHandle->pI2Cx->I2C_SR1;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	60fb      	str	r3, [r7, #12]
					dummy_read = pI2CHandle->pI2Cx->I2C_SR2;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	60fb      	str	r3, [r7, #12]
			//clear the ADDR flag ( read SR1 , read SR2)
			dummy_read = pI2CHandle->pI2Cx->I2C_SR1;
			dummy_read = pI2CHandle->pI2Cx->I2C_SR2;
			(void)dummy_read;
		}
}
 8000b00:	e010      	b.n	8000b24 <I2C_ClearADDRFlag+0x66>
				dummy_read = pI2CHandle->pI2Cx->I2C_SR1;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	695b      	ldr	r3, [r3, #20]
 8000b08:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->I2C_SR2;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	60fb      	str	r3, [r7, #12]
}
 8000b12:	e007      	b.n	8000b24 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->I2C_SR1;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->I2C_SR2;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	60fb      	str	r3, [r7, #12]
}
 8000b24:	bf00      	nop
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->RCC_CFGR >> 2) & 0x3);
 8000b32:	4b25      	ldr	r3, [pc, #148]	; (8000bc8 <RCC_GetPCLK1Value+0x9c>)
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	089b      	lsrs	r3, r3, #2
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	f003 0303 	and.w	r3, r3, #3
 8000b3e:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 8000b40:	7a7b      	ldrb	r3, [r7, #9]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d102      	bne.n	8000b4c <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8000b46:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <RCC_GetPCLK1Value+0xa0>)
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	e00b      	b.n	8000b64 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8000b4c:	7a7b      	ldrb	r3, [r7, #9]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d102      	bne.n	8000b58 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8000b52:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <RCC_GetPCLK1Value+0xa4>)
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	e005      	b.n	8000b64 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 8000b58:	7a7b      	ldrb	r3, [r7, #9]
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	d102      	bne.n	8000b64 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 8000b5e:	f000 f83d 	bl	8000bdc <RCC_GetPLLOutputClock>
 8000b62:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->RCC_CFGR >> 4 ) & 0xF);
 8000b64:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <RCC_GetPCLK1Value+0x9c>)
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	091b      	lsrs	r3, r3, #4
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	f003 030f 	and.w	r3, r3, #15
 8000b70:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8000b72:	7a3b      	ldrb	r3, [r7, #8]
 8000b74:	2b07      	cmp	r3, #7
 8000b76:	d802      	bhi.n	8000b7e <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	72fb      	strb	r3, [r7, #11]
 8000b7c:	e005      	b.n	8000b8a <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000b7e:	7a3b      	ldrb	r3, [r7, #8]
 8000b80:	3b08      	subs	r3, #8
 8000b82:	4a14      	ldr	r2, [pc, #80]	; (8000bd4 <RCC_GetPCLK1Value+0xa8>)
 8000b84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b88:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->RCC_CFGR >> 10 ) & 0x7);
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <RCC_GetPCLK1Value+0x9c>)
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	0a9b      	lsrs	r3, r3, #10
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8000b98:	7a3b      	ldrb	r3, [r7, #8]
 8000b9a:	2b03      	cmp	r3, #3
 8000b9c:	d802      	bhi.n	8000ba4 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	72bb      	strb	r3, [r7, #10]
 8000ba2:	e004      	b.n	8000bae <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 8000ba4:	7a3b      	ldrb	r3, [r7, #8]
 8000ba6:	3b04      	subs	r3, #4
 8000ba8:	4a0b      	ldr	r2, [pc, #44]	; (8000bd8 <RCC_GetPCLK1Value+0xac>)
 8000baa:	5cd3      	ldrb	r3, [r2, r3]
 8000bac:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 8000bae:	7afb      	ldrb	r3, [r7, #11]
 8000bb0:	68fa      	ldr	r2, [r7, #12]
 8000bb2:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bb6:	7abb      	ldrb	r3, [r7, #10]
 8000bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bbc:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000bbe:	687b      	ldr	r3, [r7, #4]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	00f42400 	.word	0x00f42400
 8000bd0:	007a1200 	.word	0x007a1200
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	20000010 	.word	0x20000010

08000bdc <RCC_GetPLLOutputClock>:

	return pclk2;
}

uint32_t  RCC_GetPLLOutputClock()
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0

	return 0;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr
	...

08000bec <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000bf2:	f000 fa19 	bl	8001028 <ssd1306_I2C_Init>
//		/* Return false */
//		return 0;
//	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000bf6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000bfa:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000bfc:	e002      	b.n	8000c04 <SSD1306_Init+0x18>
		p--;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	3b01      	subs	r3, #1
 8000c02:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d1f9      	bne.n	8000bfe <SSD1306_Init+0x12>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000c0a:	22ae      	movs	r2, #174	; 0xae
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	203c      	movs	r0, #60	; 0x3c
 8000c10:	f000 fa66 	bl	80010e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000c14:	2220      	movs	r2, #32
 8000c16:	2100      	movs	r1, #0
 8000c18:	203c      	movs	r0, #60	; 0x3c
 8000c1a:	f000 fa61 	bl	80010e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000c1e:	2210      	movs	r2, #16
 8000c20:	2100      	movs	r1, #0
 8000c22:	203c      	movs	r0, #60	; 0x3c
 8000c24:	f000 fa5c 	bl	80010e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000c28:	22b0      	movs	r2, #176	; 0xb0
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	203c      	movs	r0, #60	; 0x3c
 8000c2e:	f000 fa57 	bl	80010e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000c32:	22c8      	movs	r2, #200	; 0xc8
 8000c34:	2100      	movs	r1, #0
 8000c36:	203c      	movs	r0, #60	; 0x3c
 8000c38:	f000 fa52 	bl	80010e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2100      	movs	r1, #0
 8000c40:	203c      	movs	r0, #60	; 0x3c
 8000c42:	f000 fa4d 	bl	80010e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000c46:	2210      	movs	r2, #16
 8000c48:	2100      	movs	r1, #0
 8000c4a:	203c      	movs	r0, #60	; 0x3c
 8000c4c:	f000 fa48 	bl	80010e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000c50:	2240      	movs	r2, #64	; 0x40
 8000c52:	2100      	movs	r1, #0
 8000c54:	203c      	movs	r0, #60	; 0x3c
 8000c56:	f000 fa43 	bl	80010e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000c5a:	2281      	movs	r2, #129	; 0x81
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	203c      	movs	r0, #60	; 0x3c
 8000c60:	f000 fa3e 	bl	80010e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000c64:	22ff      	movs	r2, #255	; 0xff
 8000c66:	2100      	movs	r1, #0
 8000c68:	203c      	movs	r0, #60	; 0x3c
 8000c6a:	f000 fa39 	bl	80010e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000c6e:	22a1      	movs	r2, #161	; 0xa1
 8000c70:	2100      	movs	r1, #0
 8000c72:	203c      	movs	r0, #60	; 0x3c
 8000c74:	f000 fa34 	bl	80010e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000c78:	22a6      	movs	r2, #166	; 0xa6
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	203c      	movs	r0, #60	; 0x3c
 8000c7e:	f000 fa2f 	bl	80010e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000c82:	22a8      	movs	r2, #168	; 0xa8
 8000c84:	2100      	movs	r1, #0
 8000c86:	203c      	movs	r0, #60	; 0x3c
 8000c88:	f000 fa2a 	bl	80010e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000c8c:	223f      	movs	r2, #63	; 0x3f
 8000c8e:	2100      	movs	r1, #0
 8000c90:	203c      	movs	r0, #60	; 0x3c
 8000c92:	f000 fa25 	bl	80010e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000c96:	22a4      	movs	r2, #164	; 0xa4
 8000c98:	2100      	movs	r1, #0
 8000c9a:	203c      	movs	r0, #60	; 0x3c
 8000c9c:	f000 fa20 	bl	80010e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000ca0:	22d3      	movs	r2, #211	; 0xd3
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	203c      	movs	r0, #60	; 0x3c
 8000ca6:	f000 fa1b 	bl	80010e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	203c      	movs	r0, #60	; 0x3c
 8000cb0:	f000 fa16 	bl	80010e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000cb4:	22d5      	movs	r2, #213	; 0xd5
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	203c      	movs	r0, #60	; 0x3c
 8000cba:	f000 fa11 	bl	80010e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000cbe:	22f0      	movs	r2, #240	; 0xf0
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	203c      	movs	r0, #60	; 0x3c
 8000cc4:	f000 fa0c 	bl	80010e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000cc8:	22d9      	movs	r2, #217	; 0xd9
 8000cca:	2100      	movs	r1, #0
 8000ccc:	203c      	movs	r0, #60	; 0x3c
 8000cce:	f000 fa07 	bl	80010e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000cd2:	2222      	movs	r2, #34	; 0x22
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	203c      	movs	r0, #60	; 0x3c
 8000cd8:	f000 fa02 	bl	80010e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000cdc:	22da      	movs	r2, #218	; 0xda
 8000cde:	2100      	movs	r1, #0
 8000ce0:	203c      	movs	r0, #60	; 0x3c
 8000ce2:	f000 f9fd 	bl	80010e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000ce6:	2212      	movs	r2, #18
 8000ce8:	2100      	movs	r1, #0
 8000cea:	203c      	movs	r0, #60	; 0x3c
 8000cec:	f000 f9f8 	bl	80010e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000cf0:	22db      	movs	r2, #219	; 0xdb
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	203c      	movs	r0, #60	; 0x3c
 8000cf6:	f000 f9f3 	bl	80010e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000cfa:	2220      	movs	r2, #32
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	203c      	movs	r0, #60	; 0x3c
 8000d00:	f000 f9ee 	bl	80010e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000d04:	228d      	movs	r2, #141	; 0x8d
 8000d06:	2100      	movs	r1, #0
 8000d08:	203c      	movs	r0, #60	; 0x3c
 8000d0a:	f000 f9e9 	bl	80010e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000d0e:	2214      	movs	r2, #20
 8000d10:	2100      	movs	r1, #0
 8000d12:	203c      	movs	r0, #60	; 0x3c
 8000d14:	f000 f9e4 	bl	80010e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000d18:	22af      	movs	r2, #175	; 0xaf
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	203c      	movs	r0, #60	; 0x3c
 8000d1e:	f000 f9df 	bl	80010e0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000d22:	222e      	movs	r2, #46	; 0x2e
 8000d24:	2100      	movs	r1, #0
 8000d26:	203c      	movs	r0, #60	; 0x3c
 8000d28:	f000 f9da 	bl	80010e0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f000 f841 	bl	8000db4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000d32:	f000 f811 	bl	8000d58 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000d36:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <SSD1306_Init+0x168>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <SSD1306_Init+0x168>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000d42:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <SSD1306_Init+0x168>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000d48:	2301      	movs	r3, #1
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000448 	.word	0x20000448

08000d58 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000d5e:	2300      	movs	r3, #0
 8000d60:	71fb      	strb	r3, [r7, #7]
 8000d62:	e01d      	b.n	8000da0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	3b50      	subs	r3, #80	; 0x50
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	203c      	movs	r0, #60	; 0x3c
 8000d70:	f000 f9b6 	bl	80010e0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2100      	movs	r1, #0
 8000d78:	203c      	movs	r0, #60	; 0x3c
 8000d7a:	f000 f9b1 	bl	80010e0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000d7e:	2210      	movs	r2, #16
 8000d80:	2100      	movs	r1, #0
 8000d82:	203c      	movs	r0, #60	; 0x3c
 8000d84:	f000 f9ac 	bl	80010e0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	01db      	lsls	r3, r3, #7
 8000d8c:	4a08      	ldr	r2, [pc, #32]	; (8000db0 <SSD1306_UpdateScreen+0x58>)
 8000d8e:	441a      	add	r2, r3
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	2140      	movs	r1, #64	; 0x40
 8000d94:	203c      	movs	r0, #60	; 0x3c
 8000d96:	f000 f95b 	bl	8001050 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	71fb      	strb	r3, [r7, #7]
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	2b07      	cmp	r3, #7
 8000da4:	d9de      	bls.n	8000d64 <SSD1306_UpdateScreen+0xc>
	}
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000048 	.word	0x20000048

08000db4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d101      	bne.n	8000dc8 <SSD1306_Fill+0x14>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	e000      	b.n	8000dca <SSD1306_Fill+0x16>
 8000dc8:	23ff      	movs	r3, #255	; 0xff
 8000dca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4803      	ldr	r0, [pc, #12]	; (8000de0 <SSD1306_Fill+0x2c>)
 8000dd2:	f000 fb01 	bl	80013d8 <memset>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000048 	.word	0x20000048

08000de4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	80fb      	strh	r3, [r7, #6]
 8000dee:	460b      	mov	r3, r1
 8000df0:	80bb      	strh	r3, [r7, #4]
 8000df2:	4613      	mov	r3, r2
 8000df4:	70fb      	strb	r3, [r7, #3]
	if (
 8000df6:	88fb      	ldrh	r3, [r7, #6]
 8000df8:	2b7f      	cmp	r3, #127	; 0x7f
 8000dfa:	d848      	bhi.n	8000e8e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000dfc:	88bb      	ldrh	r3, [r7, #4]
 8000dfe:	2b3f      	cmp	r3, #63	; 0x3f
 8000e00:	d845      	bhi.n	8000e8e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000e02:	4b25      	ldr	r3, [pc, #148]	; (8000e98 <SSD1306_DrawPixel+0xb4>)
 8000e04:	791b      	ldrb	r3, [r3, #4]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d006      	beq.n	8000e18 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000e0a:	78fb      	ldrb	r3, [r7, #3]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	bf0c      	ite	eq
 8000e10:	2301      	moveq	r3, #1
 8000e12:	2300      	movne	r3, #0
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000e18:	78fb      	ldrb	r3, [r7, #3]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d11a      	bne.n	8000e54 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000e1e:	88fa      	ldrh	r2, [r7, #6]
 8000e20:	88bb      	ldrh	r3, [r7, #4]
 8000e22:	08db      	lsrs	r3, r3, #3
 8000e24:	b298      	uxth	r0, r3
 8000e26:	4603      	mov	r3, r0
 8000e28:	01db      	lsls	r3, r3, #7
 8000e2a:	4413      	add	r3, r2
 8000e2c:	4a1b      	ldr	r2, [pc, #108]	; (8000e9c <SSD1306_DrawPixel+0xb8>)
 8000e2e:	5cd3      	ldrb	r3, [r2, r3]
 8000e30:	b25a      	sxtb	r2, r3
 8000e32:	88bb      	ldrh	r3, [r7, #4]
 8000e34:	f003 0307 	and.w	r3, r3, #7
 8000e38:	2101      	movs	r1, #1
 8000e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3e:	b25b      	sxtb	r3, r3
 8000e40:	4313      	orrs	r3, r2
 8000e42:	b259      	sxtb	r1, r3
 8000e44:	88fa      	ldrh	r2, [r7, #6]
 8000e46:	4603      	mov	r3, r0
 8000e48:	01db      	lsls	r3, r3, #7
 8000e4a:	4413      	add	r3, r2
 8000e4c:	b2c9      	uxtb	r1, r1
 8000e4e:	4a13      	ldr	r2, [pc, #76]	; (8000e9c <SSD1306_DrawPixel+0xb8>)
 8000e50:	54d1      	strb	r1, [r2, r3]
 8000e52:	e01d      	b.n	8000e90 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000e54:	88fa      	ldrh	r2, [r7, #6]
 8000e56:	88bb      	ldrh	r3, [r7, #4]
 8000e58:	08db      	lsrs	r3, r3, #3
 8000e5a:	b298      	uxth	r0, r3
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	01db      	lsls	r3, r3, #7
 8000e60:	4413      	add	r3, r2
 8000e62:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <SSD1306_DrawPixel+0xb8>)
 8000e64:	5cd3      	ldrb	r3, [r2, r3]
 8000e66:	b25a      	sxtb	r2, r3
 8000e68:	88bb      	ldrh	r3, [r7, #4]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fa01 f303 	lsl.w	r3, r1, r3
 8000e74:	b25b      	sxtb	r3, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	b25b      	sxtb	r3, r3
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	b259      	sxtb	r1, r3
 8000e7e:	88fa      	ldrh	r2, [r7, #6]
 8000e80:	4603      	mov	r3, r0
 8000e82:	01db      	lsls	r3, r3, #7
 8000e84:	4413      	add	r3, r2
 8000e86:	b2c9      	uxtb	r1, r1
 8000e88:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <SSD1306_DrawPixel+0xb8>)
 8000e8a:	54d1      	strb	r1, [r2, r3]
 8000e8c:	e000      	b.n	8000e90 <SSD1306_DrawPixel+0xac>
		return;
 8000e8e:	bf00      	nop
	}
}
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr
 8000e98:	20000448 	.word	0x20000448
 8000e9c:	20000048 	.word	0x20000048

08000ea0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	460a      	mov	r2, r1
 8000eaa:	80fb      	strh	r3, [r7, #6]
 8000eac:	4613      	mov	r3, r2
 8000eae:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000eb0:	4a05      	ldr	r2, [pc, #20]	; (8000ec8 <SSD1306_GotoXY+0x28>)
 8000eb2:	88fb      	ldrh	r3, [r7, #6]
 8000eb4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000eb6:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <SSD1306_GotoXY+0x28>)
 8000eb8:	88bb      	ldrh	r3, [r7, #4]
 8000eba:	8053      	strh	r3, [r2, #2]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000448 	.word	0x20000448

08000ecc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	6039      	str	r1, [r7, #0]
 8000ed6:	71fb      	strb	r3, [r7, #7]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000edc:	4b3a      	ldr	r3, [pc, #232]	; (8000fc8 <SSD1306_Putc+0xfc>)
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	4413      	add	r3, r2
	if (
 8000ee8:	2b7f      	cmp	r3, #127	; 0x7f
 8000eea:	dc07      	bgt.n	8000efc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000eec:	4b36      	ldr	r3, [pc, #216]	; (8000fc8 <SSD1306_Putc+0xfc>)
 8000eee:	885b      	ldrh	r3, [r3, #2]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	785b      	ldrb	r3, [r3, #1]
 8000ef6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000ef8:	2b3f      	cmp	r3, #63	; 0x3f
 8000efa:	dd01      	ble.n	8000f00 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	e05e      	b.n	8000fbe <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	e04b      	b.n	8000f9e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685a      	ldr	r2, [r3, #4]
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	3b20      	subs	r3, #32
 8000f0e:	6839      	ldr	r1, [r7, #0]
 8000f10:	7849      	ldrb	r1, [r1, #1]
 8000f12:	fb01 f303 	mul.w	r3, r1, r3
 8000f16:	4619      	mov	r1, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	440b      	add	r3, r1
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	4413      	add	r3, r2
 8000f20:	881b      	ldrh	r3, [r3, #0]
 8000f22:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000f24:	2300      	movs	r3, #0
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	e030      	b.n	8000f8c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d010      	beq.n	8000f5c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000f3a:	4b23      	ldr	r3, [pc, #140]	; (8000fc8 <SSD1306_Putc+0xfc>)
 8000f3c:	881a      	ldrh	r2, [r3, #0]
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	4413      	add	r3, r2
 8000f44:	b298      	uxth	r0, r3
 8000f46:	4b20      	ldr	r3, [pc, #128]	; (8000fc8 <SSD1306_Putc+0xfc>)
 8000f48:	885a      	ldrh	r2, [r3, #2]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	4413      	add	r3, r2
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	79ba      	ldrb	r2, [r7, #6]
 8000f54:	4619      	mov	r1, r3
 8000f56:	f7ff ff45 	bl	8000de4 <SSD1306_DrawPixel>
 8000f5a:	e014      	b.n	8000f86 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000f5c:	4b1a      	ldr	r3, [pc, #104]	; (8000fc8 <SSD1306_Putc+0xfc>)
 8000f5e:	881a      	ldrh	r2, [r3, #0]
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	4413      	add	r3, r2
 8000f66:	b298      	uxth	r0, r3
 8000f68:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <SSD1306_Putc+0xfc>)
 8000f6a:	885a      	ldrh	r2, [r3, #2]
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	4413      	add	r3, r2
 8000f72:	b299      	uxth	r1, r3
 8000f74:	79bb      	ldrb	r3, [r7, #6]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	bf0c      	ite	eq
 8000f7a:	2301      	moveq	r3, #1
 8000f7c:	2300      	movne	r3, #0
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	461a      	mov	r2, r3
 8000f82:	f7ff ff2f 	bl	8000de4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d3c8      	bcc.n	8000f2a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	785b      	ldrb	r3, [r3, #1]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d3ad      	bcc.n	8000f06 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000faa:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <SSD1306_Putc+0xfc>)
 8000fac:	881a      	ldrh	r2, [r3, #0]
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	4413      	add	r3, r2
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <SSD1306_Putc+0xfc>)
 8000fba:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000448 	.word	0x20000448

08000fcc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000fda:	e012      	b.n	8001002 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	79fa      	ldrb	r2, [r7, #7]
 8000fe2:	68b9      	ldr	r1, [r7, #8]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff71 	bl	8000ecc <SSD1306_Putc>
 8000fea:	4603      	mov	r3, r0
 8000fec:	461a      	mov	r2, r3
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d002      	beq.n	8000ffc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	e008      	b.n	800100e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	3301      	adds	r3, #1
 8001000:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1e8      	bne.n	8000fdc <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	781b      	ldrb	r3, [r3, #0]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800101a:	2000      	movs	r0, #0
 800101c:	f7ff feca 	bl	8000db4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001020:	f7ff fe9a 	bl	8000d58 <SSD1306_UpdateScreen>
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}

08001028 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800102e:	4b07      	ldr	r3, [pc, #28]	; (800104c <ssd1306_I2C_Init+0x24>)
 8001030:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001032:	e002      	b.n	800103a <ssd1306_I2C_Init+0x12>
		p--;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	607b      	str	r3, [r7, #4]
	while(p>0)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1f9      	bne.n	8001034 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&I2C1Handle);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	0003d090 	.word	0x0003d090

08001050 <ssd1306_I2C_WriteMulti>:
void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b0c7      	sub	sp, #284	; 0x11c
 8001054:	af02      	add	r7, sp, #8
 8001056:	4604      	mov	r4, r0
 8001058:	4608      	mov	r0, r1
 800105a:	4639      	mov	r1, r7
 800105c:	600a      	str	r2, [r1, #0]
 800105e:	4619      	mov	r1, r3
 8001060:	1dfb      	adds	r3, r7, #7
 8001062:	4622      	mov	r2, r4
 8001064:	701a      	strb	r2, [r3, #0]
 8001066:	1dbb      	adds	r3, r7, #6
 8001068:	4602      	mov	r2, r0
 800106a:	701a      	strb	r2, [r3, #0]
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	460a      	mov	r2, r1
 8001070:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001072:	f107 030c 	add.w	r3, r7, #12
 8001076:	1dba      	adds	r2, r7, #6
 8001078:	7812      	ldrb	r2, [r2, #0]
 800107a:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800107c:	2300      	movs	r3, #0
 800107e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001082:	e010      	b.n	80010a6 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001084:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001088:	463a      	mov	r2, r7
 800108a:	6812      	ldr	r2, [r2, #0]
 800108c:	441a      	add	r2, r3
 800108e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001092:	3301      	adds	r3, #1
 8001094:	7811      	ldrb	r1, [r2, #0]
 8001096:	f107 020c 	add.w	r2, r7, #12
 800109a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800109c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80010a0:	3301      	adds	r3, #1
 80010a2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80010a6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	1d3a      	adds	r2, r7, #4
 80010ae:	8812      	ldrh	r2, [r2, #0]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d8e7      	bhi.n	8001084 <ssd1306_I2C_WriteMulti+0x34>
I2C_MasterSendData(&I2C1Handle, dt , count+1 , address, I2C_DISABLE_SR);
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	3301      	adds	r3, #1
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	1dfb      	adds	r3, r7, #7
 80010c0:	7818      	ldrb	r0, [r3, #0]
 80010c2:	f107 010c 	add.w	r1, r7, #12
 80010c6:	2300      	movs	r3, #0
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	4603      	mov	r3, r0
 80010cc:	4803      	ldr	r0, [pc, #12]	; (80010dc <ssd1306_I2C_WriteMulti+0x8c>)
 80010ce:	f7ff fc09 	bl	80008e4 <I2C_MasterSendData>

}
 80010d2:	bf00      	nop
 80010d4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd90      	pop	{r4, r7, pc}
 80010dc:	20000450 	.word	0x20000450

080010e0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
 80010ea:	460b      	mov	r3, r1
 80010ec:	71bb      	strb	r3, [r7, #6]
 80010ee:	4613      	mov	r3, r2
 80010f0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80010f2:	79bb      	ldrb	r3, [r7, #6]
 80010f4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80010f6:	797b      	ldrb	r3, [r7, #5]
 80010f8:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(&I2C1Handle, dt, 2, address, I2C_DISABLE_SR);
 80010fa:	79fa      	ldrb	r2, [r7, #7]
 80010fc:	f107 010c 	add.w	r1, r7, #12
 8001100:	2300      	movs	r3, #0
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	4613      	mov	r3, r2
 8001106:	2202      	movs	r2, #2
 8001108:	4803      	ldr	r0, [pc, #12]	; (8001118 <ssd1306_I2C_Write+0x38>)
 800110a:	f7ff fbeb 	bl	80008e4 <I2C_MasterSendData>
}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000450 	.word	0x20000450

0800111c <I2C1_GPIOInits>:
 * Arduino Address(Slave) 		--> 0x3C(0x78 after its shifted)
 * Display 						--> 124 x 64
 */

void I2C1_GPIOInits(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
	GPIO_HANDLE_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <I2C1_GPIOInits+0x40>)
 8001124:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8001126:	2302      	movs	r3, #2
 8001128:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800112a:	2301      	movs	r3, #1
 800112c:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800112e:	2301      	movs	r3, #1
 8001130:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8001132:	2304      	movs	r3, #4
 8001134:	737b      	strb	r3, [r7, #13]
	I2CPins. GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8001136:	2302      	movs	r3, #2
 8001138:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 800113a:	2306      	movs	r3, #6
 800113c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff f93b 	bl	80003bc <GPIO_Init>


	//sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 8001146:	2307      	movs	r3, #7
 8001148:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff f935 	bl	80003bc <GPIO_Init>


}
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40020400 	.word	0x40020400

08001160 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <I2C1_Inits+0x2c>)
 8001166:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <I2C1_Inits+0x30>)
 8001168:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2c_ACK_EN;
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <I2C1_Inits+0x2c>)
 800116c:	2201      	movs	r2, #1
 800116e:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAdress= 0x78;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <I2C1_Inits+0x2c>)
 8001172:	2278      	movs	r2, #120	; 0x78
 8001174:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8001176:	4b05      	ldr	r3, [pc, #20]	; (800118c <I2C1_Inits+0x2c>)
 8001178:	2200      	movs	r2, #0
 800117a:	815a      	strh	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCL_Speed = I2C_SCL_SPEED_FM;
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <I2C1_Inits+0x2c>)
 800117e:	4a05      	ldr	r2, [pc, #20]	; (8001194 <I2C1_Inits+0x34>)
 8001180:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 8001182:	4802      	ldr	r0, [pc, #8]	; (800118c <I2C1_Inits+0x2c>)
 8001184:	f7ff fb06 	bl	8000794 <I2C_Init>

}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000450 	.word	0x20000450
 8001190:	40005400 	.word	0x40005400
 8001194:	00061a80 	.word	0x00061a80

08001198 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
	GPIO_HANDLE_t GPIOBtn,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <GPIO_ButtonInit+0x4c>)
 80011a0:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80011a6:	2300      	movs	r3, #0
 80011a8:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80011aa:	2302      	movs	r3, #2
 80011ac:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80011ae:	2300      	movs	r3, #0
 80011b0:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&GPIOBtn);
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f900 	bl	80003bc <GPIO_Init>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 80011bc:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <GPIO_ButtonInit+0x50>)
 80011be:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 80011c0:	230c      	movs	r3, #12
 80011c2:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80011c4:	2301      	movs	r3, #1
 80011c6:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80011c8:	2302      	movs	r3, #2
 80011ca:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80011cc:	2301      	movs	r3, #1
 80011ce:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80011d0:	2300      	movs	r3, #0
 80011d2:	71fb      	strb	r3, [r7, #7]

	GPIO_Init(&GpioLed);
 80011d4:	463b      	mov	r3, r7
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f8f0 	bl	80003bc <GPIO_Init>

}
 80011dc:	bf00      	nop
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40020000 	.word	0x40020000
 80011e8:	40020c00 	.word	0x40020c00

080011ec <main>:




int main(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	GPIO_ButtonInit();
 80011f2:	f7ff ffd1 	bl	8001198 <GPIO_ButtonInit>

	//i2c pin inits
	I2C1_GPIOInits();
 80011f6:	f7ff ff91 	bl	800111c <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 80011fa:	f7ff ffb1 	bl	8001160 <I2C1_Inits>

	//enable the i2c peripheral
	I2C_PCtrl(I2C1,ENABLE);
 80011fe:	2101      	movs	r1, #1
 8001200:	4842      	ldr	r0, [pc, #264]	; (800130c <main+0x120>)
 8001202:	f7ff fbd6 	bl	80009b2 <I2C_PCtrl>
  /* USER CODE END 1 */



  SSD1306_Init();  // initialise
 8001206:	f7ff fcf1 	bl	8000bec <SSD1306_Init>

  /// lets print some string
  char strarray[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
 800120a:	4a41      	ldr	r2, [pc, #260]	; (8001310 <main+0x124>)
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001210:	c303      	stmia	r3!, {r0, r1}
 8001212:	801a      	strh	r2, [r3, #0]
 while(1){

	 for(int i = 9; i >= 0; i--){
 8001214:	2309      	movs	r3, #9
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
 8001218:	e01d      	b.n	8001256 <main+0x6a>

	    SSD1306_GotoXY (62,16);
 800121a:	2110      	movs	r1, #16
 800121c:	203e      	movs	r0, #62	; 0x3e
 800121e:	f7ff fe3f 	bl	8000ea0 <SSD1306_GotoXY>

	    SSD1306_Putc(strarray[i], &Font_16x26, 1);
 8001222:	1d3a      	adds	r2, r7, #4
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	4413      	add	r3, r2
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2201      	movs	r2, #1
 800122c:	4939      	ldr	r1, [pc, #228]	; (8001314 <main+0x128>)
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fe4c 	bl	8000ecc <SSD1306_Putc>

	    SSD1306_UpdateScreen(); //display
 8001234:	f7ff fd90 	bl	8000d58 <SSD1306_UpdateScreen>

	    Delay_ms (500);
 8001238:	2300      	movs	r3, #0
 800123a:	623b      	str	r3, [r7, #32]
 800123c:	e002      	b.n	8001244 <main+0x58>
 800123e:	6a3b      	ldr	r3, [r7, #32]
 8001240:	3301      	adds	r3, #1
 8001242:	623b      	str	r3, [r7, #32]
 8001244:	6a3b      	ldr	r3, [r7, #32]
 8001246:	4a34      	ldr	r2, [pc, #208]	; (8001318 <main+0x12c>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d9f8      	bls.n	800123e <main+0x52>

	    SSD1306_Clear();
 800124c:	f7ff fee3 	bl	8001016 <SSD1306_Clear>
	 for(int i = 9; i >= 0; i--){
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	3b01      	subs	r3, #1
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	2b00      	cmp	r3, #0
 800125a:	dade      	bge.n	800121a <main+0x2e>
	}

	  SSD1306_GotoXY (26,8);
 800125c:	2108      	movs	r1, #8
 800125e:	201a      	movs	r0, #26
 8001260:	f7ff fe1e 	bl	8000ea0 <SSD1306_GotoXY>

	  SSD1306_Puts("Welcome", &Font_11x18, 1);
 8001264:	2201      	movs	r2, #1
 8001266:	492d      	ldr	r1, [pc, #180]	; (800131c <main+0x130>)
 8001268:	482d      	ldr	r0, [pc, #180]	; (8001320 <main+0x134>)
 800126a:	f7ff feaf 	bl	8000fcc <SSD1306_Puts>

	  SSD1306_UpdateScreen(); //display
 800126e:	f7ff fd73 	bl	8000d58 <SSD1306_UpdateScreen>

	  Delay_ms (1000);
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	e002      	b.n	800127e <main+0x92>
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	3301      	adds	r3, #1
 800127c:	61fb      	str	r3, [r7, #28]
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	4a28      	ldr	r2, [pc, #160]	; (8001324 <main+0x138>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d9f8      	bls.n	8001278 <main+0x8c>

	  SSD1306_GotoXY (2,29);
 8001286:	211d      	movs	r1, #29
 8001288:	2002      	movs	r0, #2
 800128a:	f7ff fe09 	bl	8000ea0 <SSD1306_GotoXY>

	  SSD1306_Puts("OLED TESTING WITH STM32", &Font_7x10, 1);
 800128e:	2201      	movs	r2, #1
 8001290:	4925      	ldr	r1, [pc, #148]	; (8001328 <main+0x13c>)
 8001292:	4826      	ldr	r0, [pc, #152]	; (800132c <main+0x140>)
 8001294:	f7ff fe9a 	bl	8000fcc <SSD1306_Puts>

	  SSD1306_UpdateScreen(); //display
 8001298:	f7ff fd5e 	bl	8000d58 <SSD1306_UpdateScreen>

	  Delay_ms (1000);
 800129c:	2300      	movs	r3, #0
 800129e:	61bb      	str	r3, [r7, #24]
 80012a0:	e002      	b.n	80012a8 <main+0xbc>
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	3301      	adds	r3, #1
 80012a6:	61bb      	str	r3, [r7, #24]
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	4a1e      	ldr	r2, [pc, #120]	; (8001324 <main+0x138>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d9f8      	bls.n	80012a2 <main+0xb6>

	  SSD1306_GotoXY (40,43);
 80012b0:	212b      	movs	r1, #43	; 0x2b
 80012b2:	2028      	movs	r0, #40	; 0x28
 80012b4:	f7ff fdf4 	bl	8000ea0 <SSD1306_GotoXY>

	  SSD1306_Puts("STM32", &Font_7x10, 1);
 80012b8:	2201      	movs	r2, #1
 80012ba:	491b      	ldr	r1, [pc, #108]	; (8001328 <main+0x13c>)
 80012bc:	481c      	ldr	r0, [pc, #112]	; (8001330 <main+0x144>)
 80012be:	f7ff fe85 	bl	8000fcc <SSD1306_Puts>

	  SSD1306_UpdateScreen(); //display
 80012c2:	f7ff fd49 	bl	8000d58 <SSD1306_UpdateScreen>

	  Delay_ms (1000);
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	e002      	b.n	80012d2 <main+0xe6>
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	3301      	adds	r3, #1
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	4a13      	ldr	r2, [pc, #76]	; (8001324 <main+0x138>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d9f8      	bls.n	80012cc <main+0xe0>

	  SSD1306_GotoXY (52,53);
 80012da:	2135      	movs	r1, #53	; 0x35
 80012dc:	2034      	movs	r0, #52	; 0x34
 80012de:	f7ff fddf 	bl	8000ea0 <SSD1306_GotoXY>

	  SSD1306_Puts("By Abhinav", &Font_7x10, 1);
 80012e2:	2201      	movs	r2, #1
 80012e4:	4910      	ldr	r1, [pc, #64]	; (8001328 <main+0x13c>)
 80012e6:	4813      	ldr	r0, [pc, #76]	; (8001334 <main+0x148>)
 80012e8:	f7ff fe70 	bl	8000fcc <SSD1306_Puts>

	  SSD1306_UpdateScreen(); //display
 80012ec:	f7ff fd34 	bl	8000d58 <SSD1306_UpdateScreen>

	  Delay_ms (1500);
 80012f0:	2300      	movs	r3, #0
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	e002      	b.n	80012fc <main+0x110>
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	3301      	adds	r3, #1
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4a0e      	ldr	r2, [pc, #56]	; (8001338 <main+0x14c>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d9f8      	bls.n	80012f6 <main+0x10a>

	  SSD1306_Clear();
 8001304:	f7ff fe87 	bl	8001016 <SSD1306_Clear>
	 for(int i = 9; i >= 0; i--){
 8001308:	e784      	b.n	8001214 <main+0x28>
 800130a:	bf00      	nop
 800130c:	40005400 	.word	0x40005400
 8001310:	08001434 	.word	0x08001434
 8001314:	20000024 	.word	0x20000024
 8001318:	00098967 	.word	0x00098967
 800131c:	2000001c 	.word	0x2000001c
 8001320:	08001400 	.word	0x08001400
 8001324:	001312cf 	.word	0x001312cf
 8001328:	20000014 	.word	0x20000014
 800132c:	08001408 	.word	0x08001408
 8001330:	08001420 	.word	0x08001420
 8001334:	08001428 	.word	0x08001428
 8001338:	001c9c37 	.word	0x001c9c37

0800133c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800133c:	480d      	ldr	r0, [pc, #52]	; (8001374 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800133e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8001340:	480d      	ldr	r0, [pc, #52]	; (8001378 <LoopForever+0x6>)
  ldr r1, =_edata
 8001342:	490e      	ldr	r1, [pc, #56]	; (800137c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001344:	4a0e      	ldr	r2, [pc, #56]	; (8001380 <LoopForever+0xe>)
  movs r3, #0
 8001346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001348:	e002      	b.n	8001350 <LoopCopyDataInit>

0800134a <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 800134a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800134c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800134e:	3304      	adds	r3, #4

08001350 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8001350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001352:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8001354:	d3f9      	bcc.n	800134a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001356:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001358:	4c0b      	ldr	r4, [pc, #44]	; (8001388 <LoopForever+0x16>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800135c:	e001      	b.n	8001362 <LoopFillZerobss>

0800135e <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 800135e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001360:	3204      	adds	r2, #4

08001362 <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 8001362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001364:	d3fb      	bcc.n	800135e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001366:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800136a:	f000 f811 	bl	8001390 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800136e:	f7ff ff3d 	bl	80011ec <main>

08001372 <LoopForever>:

LoopForever:
    b LoopForever
 8001372:	e7fe      	b.n	8001372 <LoopForever>
  ldr   r0, =_estack
 8001374:	2001ffff 	.word	0x2001ffff
  ldr r0, =_sdata
 8001378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800137c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001380:	08003c5c 	.word	0x08003c5c
  ldr r2, =_sbss
 8001384:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001388:	20000478 	.word	0x20000478

0800138c <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800138c:	e7fe      	b.n	800138c <ADC_IRQHandler>
	...

08001390 <__libc_init_array>:
 8001390:	b570      	push	{r4, r5, r6, lr}
 8001392:	4e0d      	ldr	r6, [pc, #52]	; (80013c8 <__libc_init_array+0x38>)
 8001394:	4c0d      	ldr	r4, [pc, #52]	; (80013cc <__libc_init_array+0x3c>)
 8001396:	1ba4      	subs	r4, r4, r6
 8001398:	10a4      	asrs	r4, r4, #2
 800139a:	2500      	movs	r5, #0
 800139c:	42a5      	cmp	r5, r4
 800139e:	d109      	bne.n	80013b4 <__libc_init_array+0x24>
 80013a0:	4e0b      	ldr	r6, [pc, #44]	; (80013d0 <__libc_init_array+0x40>)
 80013a2:	4c0c      	ldr	r4, [pc, #48]	; (80013d4 <__libc_init_array+0x44>)
 80013a4:	f000 f820 	bl	80013e8 <_init>
 80013a8:	1ba4      	subs	r4, r4, r6
 80013aa:	10a4      	asrs	r4, r4, #2
 80013ac:	2500      	movs	r5, #0
 80013ae:	42a5      	cmp	r5, r4
 80013b0:	d105      	bne.n	80013be <__libc_init_array+0x2e>
 80013b2:	bd70      	pop	{r4, r5, r6, pc}
 80013b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013b8:	4798      	blx	r3
 80013ba:	3501      	adds	r5, #1
 80013bc:	e7ee      	b.n	800139c <__libc_init_array+0xc>
 80013be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013c2:	4798      	blx	r3
 80013c4:	3501      	adds	r5, #1
 80013c6:	e7f2      	b.n	80013ae <__libc_init_array+0x1e>
 80013c8:	08003c54 	.word	0x08003c54
 80013cc:	08003c54 	.word	0x08003c54
 80013d0:	08003c54 	.word	0x08003c54
 80013d4:	08003c58 	.word	0x08003c58

080013d8 <memset>:
 80013d8:	4402      	add	r2, r0
 80013da:	4603      	mov	r3, r0
 80013dc:	4293      	cmp	r3, r2
 80013de:	d100      	bne.n	80013e2 <memset+0xa>
 80013e0:	4770      	bx	lr
 80013e2:	f803 1b01 	strb.w	r1, [r3], #1
 80013e6:	e7f9      	b.n	80013dc <memset+0x4>

080013e8 <_init>:
 80013e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ea:	bf00      	nop
 80013ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ee:	bc08      	pop	{r3}
 80013f0:	469e      	mov	lr, r3
 80013f2:	4770      	bx	lr

080013f4 <_fini>:
 80013f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013f6:	bf00      	nop
 80013f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013fa:	bc08      	pop	{r3}
 80013fc:	469e      	mov	lr, r3
 80013fe:	4770      	bx	lr
